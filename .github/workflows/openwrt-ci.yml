#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: Get OpenClash
        run: |
          git clone https://github.com/vernesong/OpenClash.git
          cp -r ./OpenClash/luci-app-openclash ./package
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置，需注意缩进关系
          # 例如:

          cat >> .config <<EOF
          CONFIG_TARGET_mediatek=y
          CONFIG_TARGET_mediatek_filogic=y
          CONFIG_TARGET_mediatek_filogic_DEVICE_h3c_magic-nx30-pro=y
          CONFIG_BATMAN_ADV_BATMAN_V=y
          CONFIG_BATMAN_ADV_BLA=y
          CONFIG_BATMAN_ADV_DAT=y
          CONFIG_BATMAN_ADV_MCAST=y
          CONFIG_PACKAGE_UnblockNeteaseMusic-Go=y
          CONFIG_PACKAGE_adbyby=y
          CONFIG_PACKAGE_attendedsysupgrade-common=y
          CONFIG_PACKAGE_batctl-default=y
          CONFIG_PACKAGE_cgi-io=y
          CONFIG_PACKAGE_collectd=y
          CONFIG_PACKAGE_collectd-mod-cpu=y
          CONFIG_PACKAGE_collectd-mod-interface=y
          CONFIG_PACKAGE_collectd-mod-iwinfo=y
          CONFIG_PACKAGE_collectd-mod-load=y
          CONFIG_PACKAGE_collectd-mod-memory=y
          CONFIG_PACKAGE_collectd-mod-network=y
          CONFIG_PACKAGE_collectd-mod-rrdtool=y
          CONFIG_PACKAGE_dawn=y
          CONFIG_PACKAGE_frpc=y
          CONFIG_PACKAGE_iputils-arping=y
          CONFIG_PACKAGE_jq=y
          CONFIG_PACKAGE_kmod-batman-adv=y
          CONFIG_PACKAGE_kmod-crypto-crc32c=y
          CONFIG_PACKAGE_kmod-crypto-kpp=y
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20=y
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=y
          CONFIG_PACKAGE_kmod-crypto-lib-curve25519=y
          CONFIG_PACKAGE_kmod-crypto-lib-poly1305=y
          CONFIG_PACKAGE_kmod-lib-crc16=y
          CONFIG_PACKAGE_kmod-lib-crc32c=y
          CONFIG_PACKAGE_kmod-udptunnel4=y
          CONFIG_PACKAGE_kmod-udptunnel6=y
          CONFIG_PACKAGE_kmod-wireguard=y
          CONFIG_PACKAGE_libgcrypt=y
          CONFIG_PACKAGE_libgpg-error=y
          CONFIG_PACKAGE_libltdl=y
          CONFIG_PACKAGE_libminiupnpc=y
          CONFIG_PACKAGE_libnatpmp=y
          CONFIG_PACKAGE_librrd1=y
          CONFIG_PACKAGE_libstdcpp=y
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          CONFIG_PACKAGE_luci-app-argon-config=y
          CONFIG_PACKAGE_luci-app-attendedsysupgrade=y
          CONFIG_PACKAGE_luci-app-design-config=y
          CONFIG_PACKAGE_luci-app-easymesh=y
          CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-ntpc=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-pushbot=y
          CONFIG_PACKAGE_luci-app-ramfree=y
          CONFIG_PACKAGE_luci-app-statistics=y
          CONFIG_PACKAGE_luci-app-unblockmusic=y
          CONFIG_PACKAGE_luci-app-wifischedule=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-app-zerotier=y
          CONFIG_PACKAGE_luci-compat=y
          CONFIG_PACKAGE_luci-i18n-adbyby-plus-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-argon-config-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-design-config-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-easymesh-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-frpc-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-ntpc-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-ramfree-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-statistics-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-unblockmusic-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-wifischedule-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-wireguard-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-zerotier-zh-cn=y
          CONFIG_PACKAGE_luci-proto-wireguard=y
          CONFIG_PACKAGE_luci-ssl-openssl=y
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-design=y
          CONFIG_PACKAGE_ntpclient=y
          CONFIG_PACKAGE_rpcd-mod-rpcsys=y
          CONFIG_PACKAGE_rrdtool1=y
          CONFIG_PACKAGE_umdns=y
          CONFIG_PACKAGE_wifischedule=y
          CONFIG_PACKAGE_wireguard-tools=y
          CONFIG_PACKAGE_zerotier=y          
          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.ACCOUNT_TOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
